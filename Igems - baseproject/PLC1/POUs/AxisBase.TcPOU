<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="AxisBase" Id="{3d7477b0-9d98-46c9-b003-cf67f4daff27}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK AxisBase
VAR_INPUT
	bPower : BOOL;
	bMoveAbs : BOOL;
	bMoveVel : BOOL;

END_VAR
VAR_OUTPUT
	bPowerStatus : BOOL;
END_VAR
VAR
	isVirtual : BOOL;
	axis : AXIS_REF;
	fPosition : LREAL;		//from cnc
	fVelocity : LREAL;		//from cnc
	fAcc : LREAL;			//from cnc
	fDeacc : LREAL; 			//from cnc
	fbAxisPower : MC_Power;
	fbMoveAbsolute : MC_MoveAbsolute;
	fbHalt : MC_Halt;
	fbMoveVelocity : MC_MoveVelocity;
	axisState: INT;
	pp: INT;
	p: INT;
	fbGearIn : ARRAY[1..9] OF MC_GearIn;
	fbGearOut : MC_GearOut;
	a: INT;
	fbHome : MC_Home;
	fbHomeMemory: FB_CoEAX8000SetPositionOffset;  
	fbBias : FB_SetPositionBiasInNc_v1_10;  
	HomePos: LREAL;
	HomeSeq: INT;
	StartHome: BOOL;
	AxisHomed : BOOL;
	fbSoeReset : FB_SoEReset;
	
	//torque
	MaxTorque : LREAL;
	MinTorque : LREAL;
	fbSoEread : FB_SoERead;
	
	axisIsGeared : BOOL;
	goBacktoFifo: BOOL;
	
	//reset
	fbReset : MC_Reset;
	b: INT;
	c: INT;
	fBias: LREAL;
	aa: INT;
	HomeSeqMemory: INT;
	StartHomeMemory: BOOL;
	bAxisDriveError: BOOL;
	bAxisError: BOOL;
END_VAR


]]></Declaration>
    <Implementation>
      <ST><![CDATA[
axis.ReadStatus();
bAxisError:=axis.Status.Error;
bAxisDriveError:=axis.Status.DriveDeviceError;


CASE axisState OF

0:
	IF bMoveAbs THEN
		axisState := 100;
		b := b +1;
	END_IF
	IF bMoveVel THEN
		c := c +1;
		axisState := 200;
	END_IF

10:
	IF FIFOaxis.FifoActive THEN 
		goBacktoFifo := TRUE;
		MAIN.M_gearOutAll();
	END_IF	
	axisState := 20;

20:
	IF FIFOaxis.FifoActive THEN 
		FIFOaxis.M_deIntegrate();
	END_IF
	axisState := 30;
	

	
100:
	fbHalt.Execute := TRUE;
	IF (fbHalt.Busy AND NOT fbMoveAbsolute.Busy) OR fbHalt.Done THEN
		fbHalt.Execute := FALSE;
		axisState := 120;
	END_IF		

	
120:
	bMoveAbs := FALSE;	
	IF fVelocity <> 0 THEN
	fbmoveAbsolute.Execute := TRUE;
		axisState := 130;
	ELSE
		axisState := 0;
	END_IF
	
130:
	IF fbMoveAbsolute.Busy THEN
		fbMoveAbsolute.Execute := FALSE;
		axisState := 140;
	END_IF
	pp := pp +1;

140: 
	axisState := 0;	



200:
	fbHalt.Execute := TRUE;
	axisState := 210;

210:
	fbHalt.Execute := FALSE;
	axisState := 220;
	
220:
	bMoveVel := FALSE;
	IF fVelocity <> 0 THEN
		fbMoveVelocity.Execute := TRUE;	
		axisState := 230;
	ELSE
		axisState := 0;
	END_IF
	
230: 
	fbMoveVelocity.Execute := FALSE;
	axisState := 0;	


END_CASE





fbMoveAbsolute(
	Axis:= axis, 
	Execute:= , 
	Position:= fPosition, 
	Velocity:= fVelocity, 
	Acceleration:= fAcc, 
	Deceleration:= fDeacc, 
	Jerk:= 1000, 
	BufferMode:= ,//MC_BufferMode.MC_Aborting, 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
	
fbMoveVelocity(
	Axis:= axis, 
	Execute:= , 
	Velocity:= fVelocity, 
	Acceleration:= fAcc, 
	Deceleration:= fDeacc, 
	Jerk:= 5000, 
	Direction:= , 
	BufferMode:= , 
	Options:= , 
	InVelocity=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );

	
fbHalt(
	Axis:= axis, 
	Execute:= , 
	Deceleration:= 1000, 
	Jerk:= 5000, 
	BufferMode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );

	
fbAxisPower(
	Axis:= axis, 
	Enable:= bPower, 
	Enable_Positive:= TRUE, 
	Enable_Negative:= TRUE, 
	Override:= 100, 
	BufferMode:= ,
	Options:= , 
	Status=> bPowerStatus, 
	Busy=> , 
	Active=> , 
	Error=> , 
	ErrorID=> );
	

	//GEAR

FOR a:=1 TO 9 DO
	IF fbGearIn[a].Execute AND fbGearIn[a].Busy THEN 
		fbGearIn[a].Execute := FALSE; 
	END_IF
END_FOR


IF fbGearOut.Execute AND fbGearOut.Busy THEN
	fbhalt.Execute := FALSE;
	fbGearOut.Execute := FALSE;
END_IF



	
fbGearOut(
	Slave:= axis, 
	Execute:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );

fbGearIn[1](Master:= main.motor_x_master.axis, Slave:= axis, RatioDenominator := 1, RatioNumerator := 1);
fbGearIn[2](Master:= main.motor_y_master.axis, Slave:= axis, RatioDenominator := 1, RatioNumerator := 1);
fbGearIn[3](Master:= main.motor_z0_multimaster.axis, Slave:= axis, RatioDenominator := 1, RatioNumerator := 1);
fbGearIn[4](Master:= main.motor_a_master.axis, Slave:= axis, RatioDenominator := 1, RatioNumerator := 1);
fbGearIn[5](Master:= main.motor_b_master.axis, Slave:= axis, RatioDenominator := 1, RatioNumerator := 1);
fbGearIn[6](Master:= main.motor_c_master.axis, Slave:= axis, RatioDenominator := 1, RatioNumerator := 1);
fbGearIn[7](Master:= main.motor_d_master.axis, Slave:= axis, RatioDenominator := 1, RatioNumerator := 1);
fbGearIn[8](Master:= main.motor_e_master.axis, Slave:= axis, RatioDenominator := 1, RatioNumerator := 1);
fbGearIn[9](Master:= main.motor_z1_multimaster.axis, Slave:= axis, RatioDenominator := 1, RatioNumerator := 1);	
	
//HOMING

CASE HomeSeq OF
	
	0: 
		IF 	StartHome THEN
			HomeSeq := 10;
		END_IF

		
	10:
		StartHome := FALSE;
		fbHome.Position := HomePos;
		HomeSeq := 20;
				aa := aa +1;
	20:
		fbHome.Execute := TRUE;
		//fbBias.bExecute :=TRUE;
		HomeSeq := 30;
		
	30:
		IF fbHome.Execute AND NOT fbHome.Busy THEN
			fbHome.Execute := FALSE;
			//fbBias.bExecute :=FALSE;
			HomeSeq :=0;
			AxisHomed := TRUE;
		END_IF

END_CASE


CASE HomeSeqMemory OF
	
	0: 
		IF 	StartHomeMemory THEN
			HomeSeqMemory := 10;
		END_IF

		
	10:
		StartHomeMemory := FALSE;
		fbHomeMemory.Position := HomePos;
		fbHomeMemory.Memory := 1;
		fbHomeMemory.Feedback := 0;
		HomeSeqMemory := 20;
	
	20:
		fbHomeMemory.Execute := TRUE;
		//fbBias.bExecute :=TRUE;
		HomeSeqMemory := 30;
		
	30:
		IF fbHomeMemory.Execute AND NOT fbHomeMemory.Busy THEN
			fbHomeMemory.Execute := FALSE;
			//fbBias.bExecute :=FALSE;
			HomeSeqMemory :=0;
			//AxisHomed := TRUE;
		END_IF

END_CASE


fbHome(
	Axis:= axis, 
	Execute:= , 
	Position:= , 
	HomingMode:= MC_HomingMode.MC_Direct, 
	BufferMode:= , 
	Options:= , 
	bCalibrationCam:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	

fBias := (HomePos - axis.NcToPlc.ActPos);
fbBias(
	bInit:= , 
	bExecute:= , 
	fOffset:= , 
	bBusy=> , 
	bDone=> , 
	bError=> , 
	nErrorId=> , 
	fPositionBias:= fBias, 
	Axis:= axis);
	

	// TORQUE
	//ska läsas skriva till driven. Olika för olika typer av drives. Ex Sercos:
	
	fbSoEread(
	Axis:= axis, 
	NetId:= '', 
	Idn:= S_0_IDNs + 82, 
	Element:= 16#40, 
	pDstBuf:= ADR(MaxTorque), 
	BufLen:= SIZEOF(MaxTorque), 
	Execute:= , 
	Timeout:= , 
	Busy=> , 
	Error=> , 
	AdsErrId=> , 
	SercosErrId=> , 
	Attribute=> );
	

IF fbReset.Execute AND fbReset.Busy THEN
	fbReset.Execute := FALSE;
END_IF

	
fbReset(
	Axis:= axis, 
	Execute:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );

fbSoeReset(
	Axis:= axis, 
	NetId:= , 
	Execute:= , 
	Timeout:= , 
	Busy=> , 
	Error=> , 
	AdsErrId=> , 
	SercosErrId=> );

IF fbSoeReset.Execute AND fbSoeReset.Busy THEN
	fbSoeReset.Execute := FALSE;
END_IF]]></ST>
    </Implementation>
    <Method Name="M_GearIn" Id="{dad86f9d-4401-48c1-8e27-b00609e92396}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD M_GearIn : BOOL
VAR_INPUT
	Slavename : STRING;
	Master : int;
END_VAR


]]></Declaration>
      <Implementation>
        <ST><![CDATA[
axisIsGeared := TRUE;


IF (master = 1) THEN
	fbGearIn[1].Execute := TRUE;
ELSIF (master = 2) THEN
	fbGearIn[2].Execute := TRUE;
ELSIF (master = 3) THEN
	fbGearIn[3].Execute := TRUE;
ELSIF (master = 4) THEN
	fbGearIn[4].Execute := TRUE;
ELSIF (master = 5) THEN
	fbGearIn[5].Execute := TRUE;
ELSIF (master = 6) THEN
	fbGearIn[6].Execute := TRUE;
ELSIF (master = 7) THEN
	fbGearIn[7].Execute := TRUE;
ELSIF (master = 8) THEN
	fbGearIn[8].Execute := TRUE;
ELSIF (master = 9) THEN
	fbGearIn[9].Execute := TRUE;
ELSE
	//
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_GearOut" Id="{dcf123aa-1fa5-497d-a3f9-7bc5b95bcbda}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD M_GearOut : BOOL
VAR_INPUT
	slavename : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

axisIsGeared := FALSE;
fbhalt.Execute := TRUE;

fbGearOut.Execute := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="AxisBase">
      <LineId Id="907" Count="313" />
      <LineId Id="1278" Count="12" />
      <LineId Id="427" Count="0" />
    </LineIds>
    <LineIds Name="AxisBase.M_GearIn">
      <LineId Id="16" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="64" Count="0" />
      <LineId Id="66" Count="12" />
      <LineId Id="103" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="92" Count="1" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="AxisBase.M_GearOut">
      <LineId Id="18" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>